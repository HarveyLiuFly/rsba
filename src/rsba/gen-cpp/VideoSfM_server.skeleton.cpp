// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "rsba/VideoSfM.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::vision::sfm::gen;

class VideoSfMHandler : virtual public VideoSfMIf {
 public:
  VideoSfMHandler() {
    // Your initialization goes here
  }

  void authenticate(std::string& _return) {
    // Your implementation goes here
    printf("authenticate\n");
  }

  int32_t newSession(const std::string& authToken, const std::vector<double> & camera) {
    // Your implementation goes here
    printf("newSession\n");
  }

  int32_t cloneSession(const std::string& authToken, const int32_t oldSessionKey) {
    // Your implementation goes here
    printf("cloneSession\n");
  }

  int32_t newRsSession(const std::string& authToken, const std::vector<double> & camera, const RollingShutter::type rs, const std::vector<int32_t> & scanlines) {
    // Your implementation goes here
    printf("newRsSession\n");
  }

  int32_t newFrame(const std::string& authToken, const int32_t sessionKey, const Frame& frame) {
    // Your implementation goes here
    printf("newFrame\n");
  }

  void getFrame(Frame& _return, const std::string& authToken, const int32_t sessionKey, const int32_t frameKey) {
    // Your implementation goes here
    printf("getFrame\n");
  }

  int32_t newTrack(const std::string& authToken, const int32_t sessionKey, const Track& track) {
    // Your implementation goes here
    printf("newTrack\n");
  }

  void getTracks(std::vector<Track> & _return, const std::string& authToken, const int32_t sessionKey) {
    // Your implementation goes here
    printf("getTracks\n");
  }

  void initialize(const std::string& authToken, const int32_t sessionKey) {
    // Your implementation goes here
    printf("initialize\n");
  }

  bool fullBA(const std::string& authToken, const int32_t sessionKey, const int32_t maxIter, const bool reproject) {
    // Your implementation goes here
    printf("fullBA\n");
  }

  bool windowedBA(const std::string& authToken, const int32_t sessionKey, const int32_t startFrame, const int32_t endFrame, const int32_t maxIter, const bool reproject) {
    // Your implementation goes here
    printf("windowedBA\n");
  }

  void finalize(const std::string& authToken, const int32_t sessionKey) {
    // Your implementation goes here
    printf("finalize\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<VideoSfMHandler> handler(new VideoSfMHandler());
  shared_ptr<TProcessor> processor(new VideoSfMProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

